generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  adAccounts AdAccount[]
  users      User[]
}

model User {
  id                         Int                            @id @default(autoincrement())
  email                      String                         @unique
  firebase_uid               String                         @unique
  department_id              Int
  created_at                 DateTime                       @default(now())
  updated_at                 DateTime                       @updatedAt
  role                       Role
  department                 Department                     @relation(fields: [department_id], references: [id])
  displaySettingVisibilities UserDisplaySettingVisibility[]
  permissions                UserPermission[]
  permissionRequests         UserPermissionRequest[]
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  projects   Project[]
}

model Project {
  id         Int         @id @default(autoincrement())
  name       String
  client_id  Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  adAccounts AdAccount[]
  client     Client      @relation(fields: [client_id], references: [id])

  @@unique([name, client_id])
}

model AdPlatform {
  id              Int                        @id @default(autoincrement())
  name            String                     @unique
  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
  adAccounts      AdAccount[]
  displaySettings AdPlatformDisplaySetting[]
}

model AdAccount {
  id                       Int                       @id @default(autoincrement())
  name                     String                    @unique
  ad_platform_account_id   String
  ad_platform_id           Int
  department_id            Int?
  project_id               Int?
  created_at               DateTime                  @default(now())
  updated_at               DateTime                  @updatedAt
  ads                      Ad[]
  adPlatform               AdPlatform                @relation(fields: [ad_platform_id], references: [id])
  department               Department?               @relation(fields: [department_id], references: [id])
  project                  Project?                  @relation(fields: [project_id], references: [id])
  adGroups                 AdGroup[]
  campaigns                Campaign[]
  linkMatchers             LinkMatcher[]
  tikTokRawReportAds       TikTokRawReportAd[]
  tikTokRawReportAdGroups  TikTokRawReportAdGroup[]
  tikTokRawReportCampaigns TikTokRawReportCampaign[]
  permissions              UserPermission[]
  permissionRequests       UserPermissionRequest[]

  @@unique([ad_platform_account_id, ad_platform_id])
}

model AdPlatformDisplaySetting {
  id             Int                            @id @default(autoincrement())
  ad_platform_id Int
  name           String
  key            String
  created_at     DateTime                       @default(now())
  updated_at     DateTime                       @updatedAt
  adPlatform     AdPlatform                     @relation(fields: [ad_platform_id], references: [id])
  visibilities   UserDisplaySettingVisibility[]
}

model UserDisplaySettingVisibility {
  id                             Int                      @id @default(autoincrement())
  user_id                        Int
  ad_platform_display_setting_id Int
  is_visible                     Boolean
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime                 @updatedAt
  displaySetting                 AdPlatformDisplaySetting @relation(fields: [ad_platform_display_setting_id], references: [id])
  user                           User                     @relation(fields: [user_id], references: [id])

  @@unique([user_id, ad_platform_display_setting_id])
}

model UserPermission {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  adAccount             AdAccount @relation(fields: [ad_account_id], references: [id])
  user                  User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, ad_account_id])
}

model UserPermissionRequest {
  id                    Int                         @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  approved_by           Int?
  rejected_by           Int?
  requested_at          DateTime
  approved_at           DateTime?
  rejected_at           DateTime?
  created_at            DateTime                    @default(now())
  updated_at            DateTime                    @updatedAt
  status                UserPermissionRequestStatus
  adAccount             AdAccount                   @relation(fields: [ad_account_id], references: [id])
  user                  User                        @relation(fields: [user_id], references: [id])
}

model Campaign {
  id                     Int       @id @default(autoincrement())
  ad_account_id          Int
  platform_campaign_id   BigInt
  platform_name          String
  created_at             DateTime  @default(now())
  adGroups               AdGroup[]
  adAccount              AdAccount @relation(fields: [ad_account_id], references: [id])
}

model AdGroup {
  id                    Int       @id @default(autoincrement())
  ad_account_id         Int
  campaign_id           Int
  platform_adgroup_id   BigInt
  adgroup_name String
  created_at            DateTime  @default(now())
  ads                   Ad[]
  adAccount             AdAccount @relation(fields: [ad_account_id], references: [id])
  campaign              Campaign  @relation(fields: [campaign_id], references: [id])
}

model Ad {
  id             Int       @id @default(autoincrement())
  ad_account_id  Int
  adgroup_id     Int
  platform_ad_id BigInt
  ad_name        String
  created_at     DateTime  @default(now())
  adAccount      AdAccount @relation(fields: [ad_account_id], references: [id])
  adGroup        AdGroup   @relation(fields: [adgroup_id], references: [id])
}

model TikTokRawReportCampaign {
  id                     Int       @id @default(autoincrement())
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  created_at             DateTime  @default(now())
  ad_account_id          Int
  ad_platform_account_id String
  budget                 Int
  platform_campaign_id   BigInt
  campaign_name          String
  stat_time_day          DateTime
  status                 String
  opt_status             String
  status_updated_time    DateTime
  is_smart_performance_campaign Boolean @default(false)
  adAccount              AdAccount @relation(fields: [ad_account_id], references: [id])
}

model TikTokRawReportAdGroup {
  id                     Int       @id @default(autoincrement())
  ad_account_id          Int
  stat_time_day          DateTime
  ad_platform_account_id String
  platform_adgroup_id    BigInt
  budget                 Int
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  created_at             DateTime  @default(now())
  adgroup_name           String
  status                 String
  opt_status             String
  status_updated_time    DateTime
  adAccount              AdAccount @relation(fields: [ad_account_id], references: [id])
}

model TikTokRawReportAd {
  id                     Int       @id @default(autoincrement())
  budget                 Int
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  ad_url                 String?
  created_at             DateTime  @default(now())
  ad_account_id          Int
  ad_platform_account_id String
  platform_ad_id         BigInt
  ad_name                String
  platform_adgroup_id    BigInt
  adgroup_name           String
  platform_campaign_id   BigInt
  campaign_name          String
  stat_time_day          DateTime
  opt_status             String
  status                 String
  status_updated_time    DateTime
  adAccount              AdAccount @relation(fields: [ad_account_id], references: [id])
}

model AffiliateLink {
  id                  Int                @id @default(autoincrement())
  asp_type            AspType
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  affiliate_link_name String
  actionLogs          AspActionLog[]
  clickLogs           AspClickLog[]
  clickSnapshots      ClickLogSnapshot[]
  linkMatchers        LinkMatcher[]

  @@unique([asp_type, affiliate_link_name])
}

model ReferrerLink {
  id             Int                @id @default(autoincrement())
  creative_value String             @unique
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  actionLogs     AspActionLog[]
  clickLogs      AspClickLog[]
  clickSnapshots ClickLogSnapshot[]
  linkMatchers   LinkMatcher[]
}

model AspActionLog {
  id                Int           @id @default(autoincrement())
  uid               String?
  action_date_time  DateTime
  affiliate_link_id Int
  asp_type          AspType
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  referrer_link_id  Int?
  referrer_url      String?
  affiliateLink     AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrerLink      ReferrerLink? @relation(fields: [referrer_link_id], references: [id])
}

model AspClickLog {
  id                Int           @id @default(autoincrement())
  affiliate_link_id Int
  asp_type          AspType
  click_date_time   DateTime
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  referrer_link_id  Int?
  referrer_url      String?
  affiliateLink     AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrerLink      ReferrerLink? @relation(fields: [referrer_link_id], references: [id])
}

model ClickLogSnapshot {
  id                 Int           @id @default(autoincrement())
  currentTotalClicks Int
  affiliate_link_id  Int
  asp_type           AspType
  created_at         DateTime      @default(now())
  snapshot_date      DateTime
  updated_at         DateTime      @updatedAt
  referrer_link_id   Int?
  affiliateLink      AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrerLink       ReferrerLink? @relation(fields: [referrer_link_id], references: [id])

  @@unique([asp_type, affiliate_link_id, snapshot_date])
}

model LinkMatcher {
  id                Int            @id @default(autoincrement())
  affiliate_link_id Int?
  ad_account_id     Int
  asp_type          AspType
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  target_dim_id     BigInt
  match_type        MatchType
  media_level       MediaLevel
  referrer_link_id  Int?
  adAccount         AdAccount      @relation(fields: [ad_account_id], references: [id])
  affiliateLink     AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])
  referrerLink      ReferrerLink?  @relation(fields: [referrer_link_id], references: [id])

  @@unique([ad_account_id, asp_type, media_level, target_dim_id])
}

enum AspType {
  METRON
  CATS
  LAD
  MONKEY
  FINEBIRD
  HANIKAMU
  RENTRACKS
  SAMPLE_AFFILIATE
}

enum Role {
  user
  admin
}

enum UserPermissionRequestStatus {
  pending
  approved
  rejected
}

enum MatchType {
  AFFILIATE_LINK
  REFERRER_URL
}

enum MediaLevel {
  Campaign
  AdGroup
  Ad
}
