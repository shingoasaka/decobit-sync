generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AspType {
  METRON
  CATS
  LAD
  MONKEY
  FINEBIRD
  HANIKAMU
  RENTRACKS
  SAMPLE_AFFILIATE
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users      User[]
  adAccounts AdAccount[]
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  firebase_uid  String   @unique
  role          String   // "user" | "admin"
  department_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  department                Department @relation(fields: [department_id], references: [id])
  displaySettingVisibilities UserDisplaySettingVisibility[]
  permissions               UserPermission[]
  permissionRequests        UserPermissionRequest[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  projects Project[]
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  client_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client     Client @relation(fields: [client_id], references: [id])
  adAccounts AdAccount[]

  @@unique([name, client_id])
}

model AdPlatform {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  adAccounts           AdAccount[]
  displaySettings      AdPlatformDisplaySetting[]
}

model AdAccount {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique
  ad_platform_account_id String
  ad_platform_id        Int
  department_id         Int?
  project_id            Int?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  adPlatform           AdPlatform @relation(fields: [ad_platform_id], references: [id])
  department           Department? @relation(fields: [department_id], references: [id])
  project              Project?    @relation(fields: [project_id], references: [id])
  permissions          UserPermission[]
  permissionRequests   UserPermissionRequest[]
  campaigns            Campaign[]
  adGroups             AdGroup[]
  ads                  Ad[]
  tikTokRawReportCampaigns TikTokRawReportCampaign[]
  tikTokRawReportAdGroups  TikTokRawReportAdGroup[]
  tikTokRawReportAds       TikTokRawReportAd[]
  affiliateLinks           AffiliateLink[]
  linkMatchers             LinkMatcher[]

  @@unique([ad_platform_account_id, ad_platform_id])
}

model AdPlatformDisplaySetting {
  id              Int      @id @default(autoincrement())
  ad_platform_id  Int
  name            String
  key             String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  adPlatform      AdPlatform @relation(fields: [ad_platform_id], references: [id])
  visibilities    UserDisplaySettingVisibility[]
}

model UserDisplaySettingVisibility {
  id                          Int      @id @default(autoincrement())
  user_id                     Int
  ad_platform_display_setting_id Int
  is_visible                  Boolean
  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  user                User @relation(fields: [user_id], references: [id])
  displaySetting      AdPlatformDisplaySetting @relation(fields: [ad_platform_display_setting_id], references: [id])

  @@unique([user_id, ad_platform_display_setting_id])
}

model UserPermission {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  user        User @relation(fields: [user_id], references: [id])
  adAccount   AdAccount @relation(fields: [ad_account_id], references: [id])

  @@unique([user_id, ad_account_id])
}

model UserPermissionRequest {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  status                String   // "pending" | "approved" | "rejected"
  approved_by           Int?
  rejected_by           Int?
  requested_at          DateTime
  approved_at           DateTime?
  rejected_at           DateTime?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  user        User @relation(fields: [user_id], references: [id])
  adAccount   AdAccount @relation(fields: [ad_account_id], references: [id])
}

model Campaign {
  id                    Int      @id @default(autoincrement())
  ad_account_id         Int
  platform_campaign_id  BigInt
  platform_campaign_name String
  created_at            DateTime @default(now())

  adAccount   AdAccount @relation(fields: [ad_account_id], references: [id])
  adGroups    AdGroup[]
}

model AdGroup {
  id                    Int      @id @default(autoincrement())
  ad_account_id         Int
  campaign_id           Int
  platform_adgroup_id   BigInt
  platform_adgroup_name String
  created_at            DateTime @default(now())

  adAccount   AdAccount @relation(fields: [ad_account_id], references: [id])
  campaign    Campaign @relation(fields: [campaign_id], references: [id])
  ads         Ad[]
}

model Ad {
  id                Int      @id @default(autoincrement())
  ad_account_id     Int
  adgroup_id        Int
  platform_ad_id    Int
  ad_name           String
  created_at        DateTime @default(now())

  adAccount   AdAccount @relation(fields: [ad_account_id], references: [id])
  adGroup     AdGroup @relation(fields: [adgroup_id], references: [id])
}

model TikTokRawReportCampaign {
  id                   Int      @id @default(autoincrement())
  ad_account_id        Int?
  stat_time_day        DateTime
  ad_platform_account_id String
  platform_campaign_id BigInt
  budget               Int
  spend                Int
  impressions          Int
  clicks               Int
  video_play_actions   Int
  video_watched_2s     Int
  video_watched_6s     Int
  video_views_p100     Int
  reach                Int
  conversion           Int
  created_at           DateTime @default(now())

  adAccount   AdAccount? @relation(fields: [ad_account_id], references: [id])
}

model TikTokRawReportAdGroup {
  id                   Int      @id @default(autoincrement())
  ad_account_id        Int?
  stat_time_day        DateTime
  ad_platform_account_id String
  platform_adgroup_id  Int
  budget               Int
  spend                Int
  impressions          Int
  clicks               Int
  video_play_actions   Int
  video_watched_2s     Int
  video_watched_6s     Int
  video_views_p100     Int
  reach                Int
  conversion           Int
  created_at           DateTime @default(now())

  adAccount   AdAccount? @relation(fields: [ad_account_id], references: [id])
}

model TikTokRawReportAd {
  id                   Int      @id @default(autoincrement())
  ad_account_id        Int?
  stat_time_day        DateTime
  ad_platform_account_id String
  platform_campaign_id BigInt
  platform_campaign_name String?
  platform_adgroup_id  BigInt
  platform_adgroup_name String?
  platform_ad_id       BigInt
  platform_ad_name     String?
  ad_url               String?
  budget               Int
  spend                Int
  impressions          Int
  clicks               Int
  video_play_actions   Int
  video_watched_2s     Int
  video_watched_6s     Int
  video_views_p100     Int
  reach                Int
  conversion           Int
  created_at           DateTime @default(now())

  adAccount   AdAccount? @relation(fields: [ad_account_id], references: [id])
}

model AffiliateLink {
  id              Int      @id @default(autoincrement())
  ad_account_id   Int
  asp_type        AspType
  affiliate_name  String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  adAccount       AdAccount @relation(fields: [ad_account_id], references: [id])
  linkMatchers    LinkMatcher[]
  clickSnapshots  ClickLogSnapshot[]
  actionLogs      AspActionLog[]
  clickLogs       AspClickLog[]
}

model AspActionLog {
  id                Int      @id @default(autoincrement())
  affiliate_link_id Int?
  asp_type          AspType
  action_date_time  DateTime
  affiliateLinkName String
  referrerUrl       String?
  uid               String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  affiliateLink     AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])
}

model AspClickLog {
  id                Int      @id @default(autoincrement())
  affiliate_link_id Int?
  asp_type          AspType
  click_date_time   DateTime
  affiliateLinkName String
  referrerUrl       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  affiliateLink     AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])
}

model ClickLogSnapshot {
  id                Int      @id @default(autoincrement())
  affiliate_link_id Int?
  asp_type          AspType
  affiliateLinkName String
  currentTotalClicks Int
  snapshot_date     DateTime
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  affiliateLink     AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])

  @@unique([asp_type, affiliateLinkName, snapshot_date])
}

model LinkMatcher {
  id                Int      @id @default(autoincrement())
  affiliate_link_id Int?
  ad_account_id     Int
  asp_type          AspType
  match_type        String   // "AFFILIATE_LINK" | "REFERRER_URL"
  target_dim        String   // "campaign_name" | "adgroup_name" | "ad_name"
  media_level       String   // "Campaign" | "AdGroup" | "Ad"
  regex_pattern     String   @db.Text
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  affiliateLink     AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])
  adAccount         AdAccount      @relation(fields: [ad_account_id], references: [id])
}