generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  ad_accounts AdAccount[]
  users       User[]
}

model User {
  id                                Int                            @id @default(autoincrement())
  email                             String                         @unique
  firebase_uid                      String                         @unique
  department_id                     Int
  created_at                        DateTime                       @default(now())
  updated_at                        DateTime                       @updatedAt
  role                              Role
  is_active                         Boolean                        @default(true)
  department                        Department                     @relation(fields: [department_id], references: [id])
  user_display_setting_visibilities UserDisplaySettingVisibility[]
  user_permissions                  UserPermission[]
  approved_permission_requests      UserPermissionRequest[]        @relation("ApprovedBy")
  rejected_permission_requests      UserPermissionRequest[]        @relation("RejectedBy")
  user_permission_requests          UserPermissionRequest[]        @relation("RequestedBy")
}

model AdPlatform {
  id               Int                        @id @default(autoincrement())
  name             String                     @unique
  created_at       DateTime                   @default(now())
  updated_at       DateTime                   @updatedAt
  ad_accounts      AdAccount[]
  display_settings AdPlatformDisplaySetting[]
}

model AdPlatformDisplaySetting {
  id             Int                            @id @default(autoincrement())
  ad_platform_id Int
  name           String
  key            String
  created_at     DateTime                       @default(now())
  updated_at     DateTime                       @updatedAt
  category       String
  ad_platform    AdPlatform                     @relation(fields: [ad_platform_id], references: [id])
  visibilities   UserDisplaySettingVisibility[]
}

model UserDisplaySettingVisibility {
  id                             Int                      @id @default(autoincrement())
  user_id                        Int
  ad_platform_display_setting_id Int
  is_visible                     Boolean
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime                 @updatedAt
  display_order                  Int?
  ad_platform_display_setting    AdPlatformDisplaySetting @relation(fields: [ad_platform_display_setting_id], references: [id])
  user                           User                     @relation(fields: [user_id], references: [id])

  @@unique([user_id, ad_platform_display_setting_id])
}

model AdAccount {
  id                           Int                       @id @default(autoincrement())
  name                         String
  ad_platform_account_id       String
  ad_platform_id               Int
  department_id                Int
  project_id                   Int
  created_at                   DateTime                  @default(now())
  updated_at                   DateTime                  @updatedAt
  ads                          Ad[]
  ad_platform                  AdPlatform                @relation(fields: [ad_platform_id], references: [id])
  department                   Department                @relation(fields: [department_id], references: [id])
  project                      Project                   @relation(fields: [project_id], references: [id])
  adgroups                     Adgroup[]
  campaigns                    Campaign[]
  link_matchers                LinkMatcher[]
  tik_tok_raw_report_ads       TikTokRawReportAd[]
  tik_tok_raw_report_adgroups  TikTokRawReportAdgroup[]
  tik_tok_raw_report_campaigns TikTokRawReportCampaign[]
  user_permissions             UserPermission[]
  user_permission_requests     UserPermissionRequest[]

  @@unique([ad_platform_account_id, ad_platform_id])
}

model UserPermission {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  ad_account            AdAccount @relation(fields: [ad_account_id], references: [id])
  user                  User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, ad_account_id])
}

model UserPermissionRequest {
  id                    Int                         @id @default(autoincrement())
  user_id               Int
  ad_account_id         Int
  can_manage_ad_account Boolean
  approved_by           Int?
  rejected_by           Int?
  requested_at          DateTime                    @default(now())
  approved_at           DateTime?
  rejected_at           DateTime?
  created_at            DateTime                    @default(now())
  updated_at            DateTime                    @updatedAt
  status                UserPermissionRequestStatus
  ad_account            AdAccount                   @relation(fields: [ad_account_id], references: [id])
  approved_by_user      User?                       @relation("ApprovedBy", fields: [approved_by], references: [id])
  rejected_by_user      User?                       @relation("RejectedBy", fields: [rejected_by], references: [id])
  user                  User                        @relation("RequestedBy", fields: [user_id], references: [id])
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  projects   Project[]
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String
  client_id   Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  ad_accounts AdAccount[]
  client      Client      @relation(fields: [client_id], references: [id])

  @@unique([name, client_id])
}

model Campaign {
  id                   Int       @id @default(autoincrement())
  ad_account_id        Int
  platform_campaign_id String    @unique
  created_at           DateTime
  campaign_name        String
  adgroups             Adgroup[]
  ad_account           AdAccount @relation(fields: [ad_account_id], references: [id])
}

model Adgroup {
  id                  Int       @id @default(autoincrement())
  ad_account_id       Int
  campaign_id         Int
  platform_adgroup_id String    @unique
  adgroup_name        String
  created_at          DateTime
  ads                 Ad[]
  ad_account          AdAccount @relation(fields: [ad_account_id], references: [id])
  campaign            Campaign  @relation(fields: [campaign_id], references: [id])
}

model Ad {
  id             Int       @id @default(autoincrement())
  ad_account_id  Int
  adgroup_id     Int
  platform_ad_id String    @unique
  ad_name        String
  created_at     DateTime
  ad_account     AdAccount @relation(fields: [ad_account_id], references: [id])
  adgroup        Adgroup   @relation(fields: [adgroup_id], references: [id])
}

model TikTokRawReportCampaign {
  id                     Int       @id @default(autoincrement())
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  created_at             DateTime
  ad_account_id          Int
  ad_platform_account_id String
  budget                 Int
  platform_campaign_id   String
  stat_time_day          DateTime
  campaign_name          String
  ad_account             AdAccount @relation(fields: [ad_account_id], references: [id])

  @@index([platform_campaign_id, stat_time_day, created_at])
}

model TikTokRawReportAdgroup {
  id                     Int       @id @default(autoincrement())
  stat_time_day          DateTime
  ad_platform_account_id String
  ad_account_id          Int
  platform_adgroup_id    String
  adgroup_name           String
  budget                 Int
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  created_at             DateTime
  ad_account             AdAccount @relation(fields: [ad_account_id], references: [id])

  @@index([platform_adgroup_id, stat_time_day, created_at])
}

model TikTokRawReportAd {
  id                     Int       @id @default(autoincrement())
  budget                 Int
  spend                  Int
  impressions            Int
  clicks                 Int
  video_play_actions     Int
  video_watched_2s       Int
  video_watched_6s       Int
  video_views_p100       Int
  reach                  Int
  conversion             Int
  ad_url                 String
  created_at             DateTime
  ad_account_id          Int
  ad_platform_account_id String
  platform_ad_id         String
  platform_adgroup_id    String
  platform_campaign_id   String
  stat_time_day          DateTime
  ad_name                String
  adgroup_name           String
  campaign_name          String
  ad_account             AdAccount @relation(fields: [ad_account_id], references: [id])

  @@index([platform_ad_id, stat_time_day, created_at])
}

model TikTokCampaignStatusHistory {
  id                     Int      @id @default(autoincrement())
  ad_account_id          Int
  ad_platform_account_id String
  platform_campaign_id   String
  operation_status       String
  secondary_status       String
  created_at             DateTime @default(now())

  @@index([platform_campaign_id, created_at])
}

model TikTokAdgroupStatusHistory {
  id                     Int      @id @default(autoincrement())
  ad_account_id          Int
  ad_platform_account_id String
  platform_adgroup_id    String
  operation_status       String
  secondary_status       String
  created_at             DateTime @default(now())

  @@index([platform_adgroup_id, created_at])
}

model TikTokAdStatusHistory {
  id                     Int      @id @default(autoincrement())
  ad_account_id          Int
  ad_platform_account_id String
  platform_ad_id         String
  operation_status       String
  secondary_status       String
  created_at             DateTime @default(now())

  @@index([platform_ad_id, created_at])
}

model AffiliateLink {
  id                  Int                @id @default(autoincrement())
  asp_type            AspType
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  affiliate_link_name String
  action_logs         AspActionLog[]
  click_logs          AspClickLog[]
  click_snapshots     ClickLogSnapshot[]
  link_matchers       LinkMatcher[]

  @@unique([asp_type, affiliate_link_name])
}

model ReferrerLink {
  id              Int                @id @default(autoincrement())
  creative_value  String             @unique
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  original_url    String?
  action_logs     AspActionLog[]
  click_logs      AspClickLog[]
  click_snapshots ClickLogSnapshot[]
  link_matchers   LinkMatcher[]
}

model AspActionLog {
  id                Int           @id @default(autoincrement())
  uid               String?
  action_date_time  DateTime
  affiliate_link_id Int
  asp_type          AspType
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  referrer_link_id  Int?
  referrer_url      String?
  affiliate_link    AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrer_link     ReferrerLink? @relation(fields: [referrer_link_id], references: [id])
}

model AspClickLog {
  id                Int           @id @default(autoincrement())
  affiliate_link_id Int
  asp_type          AspType
  click_date_time   DateTime
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  referrer_link_id  Int?
  referrer_url      String?
  affiliate_link    AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrer_link     ReferrerLink? @relation(fields: [referrer_link_id], references: [id])
}

model ClickLogSnapshot {
  id                   Int           @id @default(autoincrement())
  affiliate_link_id    Int
  asp_type             AspType
  created_at           DateTime      @default(now())
  snapshot_date        DateTime
  updated_at           DateTime      @updatedAt
  referrer_link_id     Int?
  current_total_clicks Int
  affiliate_link       AffiliateLink @relation(fields: [affiliate_link_id], references: [id])
  referrer_link        ReferrerLink? @relation(fields: [referrer_link_id], references: [id])

  @@unique([asp_type, affiliate_link_id, snapshot_date])
}

model LinkMatcher {
  id                Int            @id @default(autoincrement())
  affiliate_link_id Int?
  ad_account_id     Int
  asp_type          AspType
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  target_dim_id     BigInt
  match_type        MatchType
  media_level       MediaLevel
  referrer_link_id  Int?
  ad_account        AdAccount      @relation(fields: [ad_account_id], references: [id])
  affiliate_link    AffiliateLink? @relation(fields: [affiliate_link_id], references: [id])
  referrer_link     ReferrerLink?  @relation(fields: [referrer_link_id], references: [id])

  @@unique([ad_account_id, asp_type, target_dim_id])
}

enum Role {
  user
  admin
}

enum UserPermissionRequestStatus {
  pending
  approved
  rejected
}

enum MatchType {
  AFFILIATE_LINK
  REFERRER_URL
}

enum MediaLevel {
  Campaign
  AdGroup
  Ad
}

enum AspType {
  METRON
  CATS
  LAD
  MONKEY
  FINEBIRD
  HANIKAMU
  RENTRACKS
  SAMPLE_AFFILIATE
}
